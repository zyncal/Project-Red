--[[
	wws
]]
local Oldmakefolder = makefolder
makefolder = function(Name)
	if not isfolder(Name) then
		Oldmakefolder(Name) 
	end
end
function GetContexts()
    local gtcx;
    local stcx; 
    for i, v in pairs(getgenv()) do
        if typeof(v) == "function" and string.find(tostring(i), "context") or string.find(tostring(i), "identity") then
            if string.find(tostring(i), "get") then
                gtcx = v
            elseif string.find(tostring(i), "set") then
                stcx = v
            end
        end
    end
    return gtcx, stcx
end
getcontext, setcontext = GetContexts()
syn_context_get = getcontext
syn_context_set = setcontext

meta = getrawmetatable(game)
if getgenv().MetaSet == nil or getgenv().MetaSet == true then
	local id = meta.__index
	local ni = meta.__newindex
	local nc = meta.__namecall
	getgenv().MetaSet = {["id"] = meta.__index, ["ni"] = meta.__newindex, ["nc"] = meta.__namecall}
end

local id = getgenv().MetaSet["id"]
local ni = getgenv().MetaSet["ni"]
local nc = getgenv().MetaSet["nc"]
setreadonly(meta, false)
meta.__newindex = newcclosure(function(rc, ind, id)
	if ind == "Health" and LPlr.Character ~= nil and rc == LPlr.Character:FindFirstChild("Humanoid") and id < 100 then
		return
	elseif ind == "Parent" and ((rc:IsA("Player") and not id and rc.Parent ~= nil) or rc:IsA("RemoteEvent") or rc:IsA("RemoteFunction")) then
		return
	elseif ind == "Value" and typeof(rc) == "Instance" and fireserver then
		fireserver("ChangeValue", rc, id)
	end
	return ni(rc, ind, id)
end)
meta.__index = newcclosure(function(rc, i)
    if i == "Name" and tostring(rc) == "PermanentBan" then
		Notify("Someone Attempted To Free You!", 4)
		return "Nope"
	elseif i == "Name" and tostring(rc) == "Remote" and RemoteTable and RemoteTable[i] then
		return RemoteTable[i]
    end
    return id(rc, i)
end)
meta.__namecall = newcclosure(function(rc, ...)
	args = {...}
	if getnamecallmethod() == "FindFirstChild" and args[1] == "PermanentBan" and rc == LPlr then
		AddClientMessage("Someone Attempted To Freeze You!", 4)
		return
	elseif SpawnItemOnBullet and getnamecallmethod() == "FireServer" and (tostring(rc) == "BulletHit" or tostring(rc) == "BloodHit") then
		local Pos = args[1]
		if typeof(Pos) ~= "Vector3" then
			Pos = Pos.Position
		end
		SpawnItemAtPosition(Pos, ItemToSpawnOnBullet, nil, Vector3.new())
		setnamecallmethod("FireServer")
	elseif SpawnCageOnBullet and getnamecallmethod() == "FireServer" and (tostring(rc) == "BulletHit" or tostring(rc) == "BloodHit") and CageToSpawn then
		local Pos = args[1]
		if typeof(Pos) ~= "Vector3" then
			Pos = Pos.Position + Vector3.new(0, 2.5, 0)
		else
			Pos = Pos + Vector3.new(0, 4.5, 0)
		end
		SpawnItemAtPosition(Pos, CageToSpawn, game.ReplicatedStorage, CageOffset)
		setnamecallmethod("FireServer")
	elseif (tostring(rc) == "ReplicateModel" or tostring(rc) == "ReplicatePart") and getnamecallmethod() == "FireServer" and typeof(args[1]) == "Instance" then
		if not args[1].FindFirstChild(args[1], "IsBuildingMaterial") and args[1].Parent ~= nil then
			R.AddClothing.FireServer(R.AddClothing, "IsBuildingMaterial", args[1], "", "", "")
			AddWaitForChild(args[1], "IsBuildingMaterial", "FireServer", nc, rc, args)
			return
		elseif args[1].Parent == nil then
			return
		end
		setnamecallmethod("FireServer")
	elseif getnamecallmethod() == "DistanceFromCharacter" then
		return 0
	end
	return nc(rc, ...)
end)

function N(n)
    if n< 0 then
        return n*-1
    end
    return n
end

function RoundNumber(N, To)
    N = tostring(N*To)
    local NT = string.split(N, ".")
    if #NT > 1 and tonumber(NT[2]) >= 5 then
        NT[1] = tonumber(NT[1])+1
    end
    return tonumber(NT[1])/To
end

function SearchForFuncName(Tab, Func)
	for i, v in pairs(Tab) do
		if typeof(v) == "function" and i == Func then
			return v
		elseif typeof(v) == "table" then
			local t = SearchForFuncName(v, Func)
			if t then
				return t
			end
		end
	end
end
function Replace(Str, What, Rep)
    local StrTab = string.split(Str, What)
    local NewS = StrTab[1]
    if #StrTab > 1 then
        for i = 2, #StrTab do
            NewS = NewS..Rep..StrTab[i]
        end
    end
    return NewS
end
makefolder("VictinisGuiSettings")
makefolder("VictinisGuiSettings/Themes")
makefolder("VictinisGuiSettings/Bases")
function WriteFile(fn, txt)
	writefile("VictinisGuiSettings/"..fn..".txt", txt)
end
function ReadFile(fn)
	return pcall(function() return readfile("VictinisGuiSettings/"..fn..".txt") end)
end
if pcall(function() TempApocBaseImporter = readfile("ApocBaseImporter.txt") end) then
	RealBasesTab = {}
	TempBasesTab = string.split(TempApocBaseImporter, "\n},\n")
	for i = 1, #TempBasesTab do
		local TempSplit = string.split(TempBasesTab[i], string.char(10).."},")
		for a = 1, #TempSplit do
			table.insert(RealBasesTab, TempSplit[a])
		end
	end
	CharactersToRemove = {string.char(13), string.char(10), "\n", "}", "{", " ", '"', "[", "]"}
	for i = 1, #RealBasesTab do
		local BaseSplit;
		for a = 1, string.len(RealBasesTab[i]) do
			if string.sub(RealBasesTab[i], a, a) == "=" then
				BaseSplit = {string.sub(RealBasesTab[i], 1, a-1), string.sub(RealBasesTab[i], a+1)}
				break
			end
		end
		if BaseSplit then
            for a = 1, #CharactersToRemove do
			    BaseSplit[1] = Replace(BaseSplit[1], CharactersToRemove[a], "")
            end
            S = BaseSplit[1]
            table.remove(BaseSplit, 1)
            if S ~= "" then
			    WriteFile("Bases/"..S, string.sub(BaseSplit[1], 2).."\n}", S)
            end
		end
	end
	delfile("ApocBaseImporter.txt")
end
LPlr = game.Players:GetChildren()[1]
MapName = game.MarketplaceService:GetProductInfo(game.PlaceId).Name
local NameLength = 20
local IsXbox = false
if string.sub(MapName, 1, 4) == "Xbox" then
    NameLength = NameLength+5
	IsXbox = true
end
MapName = string.sub(MapName, NameLength)
Banned = {}
ClientMessageHandler = {}
ChildrenWaitingFor = {}-- {Item, NameOfChild, method, Remote, args}
function AddClientMessage(Msg, Time)
	table.insert(ClientMessageHandler, {Msg, Time})
end
function AddWaitForChild(Item, NameOfChild, method, func, Remote, args)
	table.insert(ChildrenWaitingFor, {Item, NameOfChild, method, func, Remote, args})
end
if not queue_on_teleport then
	queue_on_teleport = SearchForFuncName(getgenv(), "queue_on_teleport")
	if not queue_on_teleport then
		queue_on_teleport = function() end
		AddClientMessage("queue_on_teleport not found, rejoin and invites will require manual re-execution")
	end
end
spawn(function()
	repeat
		wait()
	until Notify
	while wait() do
		if #ClientMessageHandler > 0 then
			for i = 1, #ClientMessageHandler do
				Notify(ClientMessageHandler[i][1], ClientMessageHandler[i][2])
			end
			ClientMessageHandler = {}
		end
		if #ChildrenWaitingFor > 0 then
			for i = 1, #ChildrenWaitingFor do
				local T = ChildrenWaitingFor[i]
				spawn(function()
					T[1]:WaitForChild(T[2])
					setnamecallmethod(T[3])
					T[4](T[5], unpack(T[6]))
				end)
			end
			ChildrenWaitingFor = {}
		end
	end
end)
for i, v in pairs(getnilinstances()) do
	if v:IsA("Player") and v.Character then
		v.Parent = game.Players
	end
end
local ServerModels = loadstring(game:HttpGet("https://pastebin.com/raw/mQbxXS4f"))()
local ServerClothing = loadstring(game:HttpGet("https://pastebin.com/raw/pp6eGM7C"))()

local TakenItems = {}
local ItemsToSpawn = {}
function AddItemsToSpawn(Item, Pos)
	if ItemsToSpawn[tostring(Item)] == nil then
		ItemsToSpawn[tostring(Item)] = {}
	end
	table.insert(ItemsToSpawn[tostring(Item)], Pos)
end
function FindItemsToSpawn(Item)
	local Part = Item
	if not Item:IsA("BasePart") then
		Part = GetPart(Item)
	end
	if ItemsToSpawn[tostring(Item)] == nil then
		return false
	end
	local Closest;
	local Indx;
	if Part ~= nil then
		for i = 1, #ItemsToSpawn[tostring(Item)] do
			if (Part.Position-ItemsToSpawn[tostring(Item)][i]).Magnitude < 25 and (Closest == nil or (Closest-Part.Position).Magnitude > (Part.Position-ItemsToSpawn[tostring(Item)][i]).Magnitude) then
				Closest = ItemsToSpawn[tostring(Item)][i]
				Indx = i
			end
		end
	end
	if Closest ~= nil and Indx ~= nil then
		table.remove(ItemsToSpawn[tostring(Item)], Indx)
		return true
	end
	return false
end
function GetCreatedItem(Par, Item, Val)
    while wait() do
        for i, v in pairs(Par:GetChildren()) do
            if v.Name == tostring(Item) and TakenItems[v] == nil and (Val == nil or Val ~= nil and v.Value == Val) then
                TakenItems[v] = true
                return v
            end
        end
    end
end

function MakeThingsInside(Item, Par)
    for i, v in pairs(Item:GetChildren()) do
        if v.Name ~= "MaxClip" then
            R.AddClothing:FireServer(v.Name, Par, v.Value, "", "")
            repeat
                wait()
            until Par:FindFirstChild(v.Name)
            MakeThingsInside(v, Par[v.Name])
        else
            R.GroupCreate:FireServer(v.Name)
            I = GetCreatedItem(game.Lighting.Groups, v.Name)
			fireserver("ChangeValue", I, v.Value)
            fireserver("ChangeParent", I, Par)
            repeat
                wait()
            until Par:FindFirstChild(v.Name)
            MakeThingsInside(v, I)
        end
    end
end
local SelectableRandomLoot = {}
for i, v in pairs(game.Lighting.LootDrops:GetChildren()) do
	if v:FindFirstChild("ObjectID") then
		table.insert(SelectableRandomLoot, v)
	end
end
function AddItem(Item, Slot)
    if not Loot:FindFirstChild(tostring(Item)) and tostring(Item) ~= "Random" then
        return
	elseif tostring(Item) == "Random" then
		Item = SelectableRandomLoot[math.random(1, #SelectableRandomLoot)]
    end
    Item = Loot[tostring(Item)].ObjectID
    R.AddClothing:FireServer("ObjectID", Slot, Item.Value, "", "")
    spawn(function()
        local ID = GetCreatedItem(Slot, "ObjectID", Item.Value)
		for i, v in pairs(ID:GetChildren()) do
			if v.Name == "" then
				fireserver("ChangeParent", v)
			end
		end
        MakeThingsInside(Item, ID)
        fireserver("ChangeValue", Slot, 1)
    end)
end

function AddBaseToFile(BaseName, BaseTxt)
    writefile("VictinisGuiSettings/Bases/"..BaseName..".txt", BaseTxt)
end

Movable = false
SpecialBypass = true
if _G.TouchParts == nil then
	_G.TouchParts = {}
	_G.ActiveParts = {}
	spawn(function()
		while wait(0.05) do
			for i, v in pairs(game.Players:GetPlayers()) do
				if v.Character ~= nil and v.Character:FindFirstChild("Head") then
					local Head = v.Character.Head
					local RayV = Ray.new(Head.Position, Vector3.new(0, -5, 0))
					local Hit = game.Workspace:FindPartOnRayWithIgnoreList(RayV, {v.Character})
					if Hit == nil or Hit ~= nil and _G.TouchParts[Hit] == nil then
						local RayV = Ray.new(Head.Position, Head.CFrame.lookVector*5)
						Hit = game.Workspace:FindPartOnRayWithIgnoreList(RayV, {v.Character})
					end
					if Hit ~= nil and _G.TouchParts[Hit] ~= nil then
						local V = _G.TouchParts[Hit]
						for i = 1, #V do
							local S = V[i]
							if typeof(S) == "table" then
								S = V[i][1]
							end
							if S == "Kill" then
								KillPlayer(Head)
							elseif S == "Teleport" or S == "TeleportIgnore" then
								TeleportPlayer(Head, V[i][2], S == "TeleportIgnore")
							elseif S == "ToolRemoval" then
								ToolRemoval(Head)
							elseif S == "Trip" then
								Trip(Head)
							elseif S == "NoFall" and Head.Parent:FindFirstChild("Humanoid") then
								NoFall(Head)
							elseif S == "Dis" then
								Disappear(Hit, V[i][2])
							elseif S == "Seat" then
								SitPlr(Head, Hit)
							elseif S == "DoUn" and Hit.Anchored then
								Unanchor(Hit)
							elseif S == "Clothing" and not _G.ActiveParts[Hit] then
								_G.ActiveParts[Hit] = true
								ToggleVest(v, false)
								pcall(function()
									ChangeClothing(v, "Pants", V[i][2])
									ChangeClothing(v, "Shirt", V[i][3])
								end)
								spawn(function()
									wait(1)
									_G.ActiveParts[Hit] = false
								end)
							end
						end
					end
				end
			end
		end
	end)
end

function MoveItem(Item, Par)
fireserver("ChangeParent", Item, Par)
end
function KillPlayer(Part)
Plr = GetPlayer(Part)
if Plr ~= nil and Plr:FindFirstChild("Humanoid") then
MoveItem(Plr.Head, nil)
end
end
function ToolRemoval(Part)
Plr = GetPlayer(Part)
if Plr ~= nil and Plr ~= LPlr.Character and Plr:FindFirstChild("Right Arm") then
Plr["Right Arm"].ChildAdded:connect(function(Ch)
wait(1)
if Ch:IsA("Weld") then
repeat
wait()
until Ch.Part1 ~= nil and Ch.Part1.Parent ~= nil
MoveItem(Ch.Part1, nil)
end
end)
end
end
function NoFall(Part)
Plr = GetPlayer(Part)
if Plr ~= nil and Plr:FindFirstChild("Humanoid") then
if Plr.Humanoid:FindFirstChild("TeleportID") then
MoveItem(Plr.Humanoid.TeleportID, nil)
end
R.AddClothing:FireServer("TeleportID", Plr.Humanoid, "", "", "")
end
end
function Trip(Part)
Plr = GetPlayer(Part)
if Plr ~= nil and Plr:FindFirstChild("Humanoid") then
R.HurtZombie:FireServer(Plr)
end
end
function Disappear(Part, Time)
	local Origin = Part.Parent
	fireserver("ChangeParent", Part, game.ReplicatedStorage)
	if Time == nil then
		Time = 3
	end
	spawn(function()
		wait(Time)
		if Origin ~= game.ReplicatedStorage then
			fireserver("ChangeParent", Part, Origin)
		end
	end)
end
local CharsSitting = {}
local LockedChairs = {}
function SitPlr(Part, Seat)
	local Char = GetPlayer(Part)
	if not Char or not Char:FindFirstChild("Humanoid") or CharsSitting[Char] or CharsSitting[Seat] and CharsSitting[Seat].Parent then
		return
	elseif CharsSitting[Seat] and not CharsSitting[Seat].Parent then
		CharsSitting[Seat] = nil
	end
	local Hum = Char.Humanoid
	local Root = Char.HumanoidRootPart
	local Con1 =  true
	local Con2;
	Con2 = Hum.Died:connect(function()
		Con1 = false
		Con2:Disconnect()
		if Seat:FindFirstChild("SeatWeld") then
			fireserver("ChangeParent", Seat.SeatWeld)
		end
		CharsSitting[Seat] = game.Workspace
		wait(2)
		CharsSitting[Seat] = nil
	end)
	R.HurtZombie:FireServer(Char)
	repeat
		wait()
	until Hum.Sit == true
	CharsSitting[Seat] = Char
	CharsSitting[Char] = true
	R.SitDown:InvokeServer(Seat, Root)
	spawn(function()
		while Con1 do
			if not Hum.Sit and LockedChairs[Seat] then
				R.HurtZombie:FireServer(Char)
			elseif not Hum.Sit then
				Con1 = false
				if Root and Root:FindFirstChild("SeatPoint") then
					CharsSitting[Char] = nil
					fireserver("ChangeParent", Root.SeatPoint)
				end
				if Seat:FindFirstChild("SeatWeld") then
					fireserver("ChangeParent", Seat.SeatWeld)
					wait(2)
					CharsSitting[Seat] = nil
				end
			end
			wait(0.1)
		end
	end)
end
function Unanchor(Prt)
    if not LPlr.Character or not LPlr.Character:FindFirstChild("IsSpawned") then
        return
    elseif LPlr.Character.IsSpawned.Value ~= false then
        fireserver("ChangeValue", LPlr.Character.IsSpawned, false)
        repeat
            wait()
        until LPlr.Character.IsSpawned.Value == false
    end
    R.Spawn:FireServer(Prt)
end

function TeleportPlayer(Part, Position, Val)
Plr = GetPlayer(Part)
if Plr ~= nil and Plr:FindFirstChild("Humanoid") and Plr:FindFirstChild("Head") and (Val ~= true or Val == true and Plr ~= LPlr.Character)then
local H = Plr.Head
R.AddClothing:FireServer("IsBuildingMaterial", H, "", "", "")
repeat
wait()
until H:FindFirstChild("IsBuildingMaterial")
NoFall(Plr.Head)
R.ReplicatePart:FireServer(H, CFrame.new(Position.X, Position.Y+2, Position.Z))
end
end

local VehicleSpawnList = {}
function SpawnVehicleBase(Veh, Position)

	local Vehicles = game.Workspace.Vehicles
	local TotalVehicleList = Vehicles:GetChildren()
	local Total = #TotalVehicleList
	for i = 1, Total do
		if TotalVehicleList[Total-i+1].Name == "VehicleWreck" then
			table.remove(TotalVehicleList, Total-i+1)
		end
	end
	local Vehicle;
	
	if Mats:FindFirstChild(Veh) then
		Vehicle = Mats[Veh]
	else
		for i = 1, #TotalVehicleList do
			if tostring(TotalVehicleList[i]) == Veh and GetPart(TotalVehicleList[i]) ~= nil then
				Vehicle = TotalVehicleList[i]
				break
			end
		end
		if Vehicle == nil then
			Vehicle = TotalVehicleList[math.random(1, #TotalVehicleList)]
		end
	end
	ChangeVehicleStats(Vehicle, 4)
	SpawnVehicle({["Character"] = {["Torso"] = {["Position"] = Position+Vector3.new(0, 8, 0)}}}, Vehicle, true)
end

function GetPlayer(T)
if T == nil or T.Parent == nil then
return nil
end
repeat
T
